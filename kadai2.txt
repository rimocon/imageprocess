■ テーマ1：2値化プログラム
  サンプルプログラムを実行せよ．このプログラムは右のウィンドウに表示されている画像を2値化するものである．
  まず，右に表示されている画像をimage[][]という配列に格納し[for_binary()関 数]，その後しきい値を設定して2値化する[ binarization() 関数 ]．
  サンプルプログラム(theme2-1.c)     



■ テーマ2：p-tail法によるしきい値決定
  切り出す対象図形の面積が既知(S0)のとき，p=S0/Sとする．Sは全体の面積．
  しきい値kで切り出した対象物の面積をN0とすると，N0/Nがpに一番近くなるときのkの値をしきい値tとして探索する．
  Nは全体の面積．

演習2 テーマ２の参考
注意点１  ボタンの数を１つ増やす．
注意点２  p-tailによるしきい値検索の関数を追加する．
  例えば．．．

void
p_tail()
{
    int i,j,k,S0,N0,N,t;
    float diff,buf,p;

    printf("S0 : ");
    scanf("%d",&S0);

    N=Isize*Jsize;
    p=S0/(float)N;
    diff=100000.;
    for(k=1;k<254;k++){
        N0=0;
        for(i=0;i<Isize;i++){
            for(j=0;j<Jsize;j++){
                if(image[i][j]>=k) N0++;
            }
        }
        buf=fabs(p-N0/(float)N);
        if(buf<diff){
            diff=buf;
            t=k;
        }
    }

    printf("P-タイル法でのしきい値は%dです\n",t);
    binarization(t);
}



■ テーマ3：判別分析法によるしきい値決定
   σB2 ＝ω1ω2(M1-M2)2  /  (ω1+ω2)2  で定義されるσB2が最大となるしきい値を探索する．
  具体的には，kより小さい濃度値のグループをclass1，kより大きいグループをclass2として，それらの画素数，平均値を算出してσB2を導く．このσB2が最大となるしきい値を探索する．

演習2  テーマ3の参考
注意点1  ボタンの数を１つ増やす．
注意点2  判別分析法の関数を追加する．
  例えば．．．
void
hanbetubunseki()
{
    int i,j,k,t,s1,s2,w1,w2;
    float M1,M2,Mt;
    double sigma2,max_sigma;

    max_sigma=0.;
    for(k=1;k<254;k++){
        w1=w2=s1=s2=0;
        for(i=0;i<Isize;i++){
            for(j=0;j<Jsize;j++){
                if(image[i][j]<k){     //class1
                           :
                           :
                }else{                     //class2
                           :
                           :
                }
            }
        }
        M1=                       ;      //class1の平均
        M2=                       ;      //class2の平均

        w1=w1/1000.0;   //計算がオーバフローする可能性があるため
        w2=w2/1000.0;   //各画素数を適当な値で正規化

        sigma2=                       ;
        if(sigma2>max_sigma){
                                     ;      
            t=              ;
        }
    }
    printf("判別分析法でのしきい値は%dです\n",t);

    binarization(t);
}



■ テーマ4：2値画像の拡大・縮小
  注目する画素が1-画素で，その近傍に0-画素があれば注目する画素を0にすると縮小となる．逆に，注目画素が0-画素で，その近傍に1-画素がある場合，その画素を1-画素に変更すれば拡大となる．
演習２  テーマ4の参考
注意点１  ボタンの数を増やす．
注意点２   拡大を行う関数と縮小を行う関数を作成する．

注目する画素が1-画素で，その近傍に0-画素があれば注目する画素を0にすると縮小となる．逆に，注目画素が0-画素で，その近傍に1-画素がある場合，その画素を1-画素に変更すれば拡大となる．
ここで注意が必要であるのは，注目画素が拡大(あるいは縮小)できると判定した際，その画素を1(あるいは0)としてしまうと，連鎖的に同処理を繰り返して しまうことである．これを防ぐためには，少し工夫が必要である．
具体的には，拡大(あるいは縮小)できると判定した場合は，その画素に適当な数字(例えば 200)を入れておく．処理が全画素終了した時点でで，画素値200をもつ画素に拡大なら1(表示用のことを考えて実際は255としている)，縮小なら0とする．
  例えば．．．

void
expantion()    //拡大
{
    int i,j,k;
    for(i=1;i<Isize-1;i++){
        for(j=1;j<Jsize-1;j++){
            if(bin[i][j]==     ){         //とりあえず4近傍
                if(bin[i-1][j  ]==      ||
                   bin[   ][   ]==       ||
                   bin[   ][   ]==       ||
                   bin[   ][   ]==     ){
                    bin[i][j]=200;
                }
            }
        }
    }
    for(i=1;i<Isize-1;i++){
        for(j=1;j<Jsize-1;j++){
            if(                ){
                bin[i][j]=255;
            }
        }
    }
    view_imgW2(bin);
}

void
contraction()     //縮小
{
          :
          :
          :
}




■ テーマ5：細線化あるいは境界線追跡のプログラムを作成する．
  教科書やプリントを参考に。
